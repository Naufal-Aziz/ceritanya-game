import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

// const initialState = JSON.parse(localStorage.getItem('savedGame'))

const initialState = localStorage.getItem('gameState') ? JSON.parse(localStorage.getItem('gameState')).generalState : {
  money: 0,
  currentEnemyHealth: null,
  stage: { chapter: 1, level: 1 },
  value: 10,
};
// console.log(JSON.parse(localStorage.getItem('savedGame')))


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const hitEnemy2 = createAsyncThunk(
  "counter/hitEnemy",
  async (_, thunkAPI) => {
    try {
      const weaponDamage = await thunkAPI.getState().character.characterEquipment.weaponDamage
      const charDamage = await thunkAPI.getState().character.characterAttribute.strength * 2
      return weaponDamage + charDamage;
    } catch (error) {
      console.log(error);
    }
  }
);

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetState: (state) => {
      // state = resetToThis
      // localStorage.setItem('savedGame', JSON.stringify(resetToThis))
    },
    activateFirstSkill: (state) => {
      // state.showSkillOneInput = !state.showSkillOneInput;
      setInterval(() => {
        hitEnemy(state.charDamage + state.weaponDamage);
      }, 1000);
    },
    enemyKilled: (state, action) => {
      if (state.stage.level === 2) {
        state.stage.chapter += 1;
        state.stage.level = 1;
      } else {
        state.stage.level += 1;
      }
      state.money += action.payload.bounty;
      state.value =
        10 *
        state.stage.chapter *
        (state.stage.level * state.stage.chapter * 1.5);
    },
    hitEnemy: (state, action) => {
      if (state.currentEnemyHealth && state.currentEnemyHealth > 0) {
        state.currentEnemyHealth -= action.payload;
      } else {
        state.currentEnemyHealth = state.value - action.payload;
      }
      // localStorage.setItem('savedGame', JSON.stringify(state))
    },
    deductMoney: (state, action) => {
      state.money -= action.payload;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      if (state.currentEnemyHealth) {
        state.currentEnemyHealth -= action.payload;
      } else {
        state.currentEnemyHealth = state.value - action.payload;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // .addCase(incrementAsync.pending, (state) => {
      //   state.status = "loading";
      // })
      // .addCase(incrementAsync.fulfilled, (state, action) => {
      //   state.status = "idle";
      //   state.value += action.payload;
      // })

      .addCase(hitEnemy2.fulfilled, (state, action) => {
        if (state.currentEnemyHealth && state.currentEnemyHealth > 0) {
          state.currentEnemyHealth -= action.payload;
        } else {
          state.currentEnemyHealth = state.value - action.payload;
        }
        console.log('ajosssss', action.payload);
      });
  },
});

export const {
  resetState,
  hitEnemy,
  incrementByAmount,
  enemyKilled,
  deductMoney,
  activateFirstSkill,
} = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;
export const money = (state) => state.counter.money;
export const stage = (state) => state.counter.stage;
export const charDamage = (state) =>
  state.character.characterAttribute.strength;
export const weaponLevel = (state) => state.counter.weaponLevel;
export const weaponUpgradePrice = (state) =>
  state.counter.weaponLevel * 50 * state.counter.weaponLevel;
export const weaponDamage = (state) => state.counter.weaponDamage;
export const currentEnemyHealth = (state) => state.counter.currentEnemyHealth;
export const showSkillOneInput = (state) => state.counter.showSkillOneInput;
export const enemyBounty = (state) =>
  state.counter.stage.chapter *
  10 *
  state.counter.stage.level *
  state.counter.stage.chapter;
// export const hitDamage = (state) =>
//   state.counter.charDamage + state.counter.weaponDamage;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
